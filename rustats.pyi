import numpy as np
from numpy.typing import NDArray

def move_sum(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_std(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_var(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_mean(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_max(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_min(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_median(
    array: NDArray[np.float64], length: int, min_length: int
) -> NDArray[np.float64]: ...
def move_skewness(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_kurtosis(
    array: NDArray[np.float64], length: int, min_length: int, parallel: bool
) -> NDArray[np.float64]: ...
def move_rank(
    array: NDArray[np.float64], length: int, min_length: int
) -> NDArray[np.float64]: ...
def agg_sum(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_mean(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_std(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_var(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_max(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_min(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_median(array: NDArray[np.float64]) -> NDArray[np.float64]: ...
def agg_skewness(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_kurtosis(array: NDArray[np.float64], parallel: bool) -> NDArray[np.float64]: ...
def agg_rank(array: NDArray[np.float64]) -> NDArray[np.float64]: ...
